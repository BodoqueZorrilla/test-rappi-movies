//
//  HomeWorker.swift
//  test-rappi-movies
//
//  Created by Sergio Zorrilla Arellano on 11/04/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the iOS team Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//

import UIKit
import RxSwift

protocol HomeWorkerInterface {
    func getMovies(completeUrl: String, completion: @escaping ([ResultsMovies]) -> Void)
    func getMoviesSearch(completeUrl: String, completion: @escaping ([ResultsMovies]) -> Void)
    func getMoviesSearchOffline(query: String, completion: @escaping ([ResultsMovies]) -> Void)
    func getMoviesOffline(section: String, completion: @escaping ([ResultsMovies]) -> Void)
}

class HomeWorker: HomeWorkerInterface {

    private let disposeBag = DisposeBag()
    
    func getMovies(completeUrl: String, completion: @escaping ([ResultsMovies]) -> Void) {
        let request =  APIRequest()
        request.completeUrl = completeUrl
        let result : Observable<[ResultsMovies]> = APIService.apiCalling.getMovies(apiRequest: request)
        result.subscribe(
            onNext: { result in
                completion(result)
            },
            onError: { error in
                print(error.localizedDescription)
            }).disposed(by: disposeBag)
    }

    func getMoviesSearch(completeUrl: String, completion: @escaping ([ResultsMovies]) -> Void) {
        let request =  APIRequest()
        request.completeUrl = completeUrl
        let result : Observable<[ResultsMovies]> = APIService.apiCalling.getMoviesSearch(apiRequest: request)
        result.subscribe(
            onNext: { result in
                completion(result)
            },
            onError: { error in
                print(error.localizedDescription)
            }).disposed(by: disposeBag)
    }

    func getMoviesSearchOffline(query: String, completion: @escaping ([ResultsMovies]) -> Void) {
        let moviesCache = CoreDataMovieManager.shared.getMovies()
        let sectionMovies = moviesCache.filter { $0.title.contains(query) }

        var resultMovies = [ResultsMovies]()
        sectionMovies.forEach { movie in
            print(movie.title)
            print(movie.section)
            let resultMovie = ResultsMovies(adult: false,
                                            backdropPath: "",
                                            firstAirDate: movie.date,
                                            genreIds: [Int](),
                                            id: Int(movie.id),
                                            originCountry: [String](),
                                        originalLanguage: "",
                                            originalTitle: movie.title,
                                            originalName: movie.title,
                                            overview: movie.overview,
                                            popularity: movie.voteAverage,
                                            posterPath: movie.image,
                                            releaseDate: movie.date,
                                            title: movie.title,
                                            video: false,
                                            voteAverage: movie.voteAverage,
                                            voteCount: 33)
            resultMovies.append(resultMovie)
        }
        completion(resultMovies)
    }

    func getMoviesOffline(section: String, completion: @escaping ([ResultsMovies]) -> Void) {
        let moviesCache = CoreDataMovieManager.shared.getMovies()
        let sectionMovies = moviesCache.filter { $0.section == section }

        var resultMovies = [ResultsMovies]()
        sectionMovies.forEach { movie in
            print(movie.title)
            print(movie.section)
            let resultMovie = ResultsMovies(adult: false,
                                            backdropPath: "",
                                            firstAirDate: movie.date,
                                            genreIds: [Int](),
                                            id: Int(movie.id),
                                            originCountry: [String](),
                                        originalLanguage: "",
                                            originalTitle: movie.title,
                                            originalName: movie.title,
                                            overview: movie.overview,
                                            popularity: movie.voteAverage,
                                            posterPath: movie.image,
                                            releaseDate: movie.date,
                                            title: movie.title,
                                            video: false,
                                            voteAverage: movie.voteAverage,
                                            voteCount: 33)
            resultMovies.append(resultMovie)
        }
        completion(resultMovies)
    }

    
}
