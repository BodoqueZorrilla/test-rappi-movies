//
//  HomeViewController.swift
//  test-rappi-movies
//
//  Created by Sergio Zorrilla Arellano on 11/04/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the iOS team Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//

import Foundation
import UIKit
import RxSwift
import RxCocoa
import RxDataSources
import SDWebImage

protocol HomeDisplayLogic: View {
    func displayMoviesAndSeries(viewModel: Home.FetchMovieScene.ViewModel)
}

class HomeViewController: UIViewController {
    
    // MARK: - Variables
    
    lazy var interactor: HomeBusinessLogic = {
        return self._interactor as! HomeBusinessLogic
    }()
    lazy var router: HomeRoutingLogic = {
        return self._router as! HomeRoutingLogic
    }()

    private var moviesCollectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: CGRect.zero, collectionViewLayout: UICollectionViewFlowLayout.init())
        return collectionView
    }()

    /*var allItems = BehaviorRelay.init(value: [
        AllMovies()
    ])*/
    var allItems = BehaviorRelay<[AllMovies]>(value: [AllMovies()])
    private var bag = DisposeBag()

    let dataSource = RxCollectionViewSectionedReloadDataSource<AllMovies>(configureCell: {
        _, cv, ip, item in
        let cell: MoviesCollectionViewCell = cv.dequeueReusableCell(withReuseIdentifier: "cell", for: ip) as! MoviesCollectionViewCell
        cell.movie = item
        return cell
    }, configureSupplementaryView: {ds, cv, _, ip in
        let header = cv.dequeueReusableSupplementaryView(ofKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "cellHeader", for: ip) as! ContentCollectionViewHeader
        header.sectionNameLabel.text = ds.sectionModels[ip.section].name
        return header
    })

    
    // MARK: - Object Lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        self.showMoviews()
        self.interactor.getMovies(request: Home.FetchMovieScene.Request())
    }
    
    // MARK: - Configurators
    
    fileprivate func setup() {
        self.setup(
            interactor: HomeInteractor(),
            presenter: HomePresenter(),
            router: HomeRouter())
    }
    
    // MARK: - Private

    private func setupUI() {
        
        moviesCollectionView.register(MoviesCollectionViewCell.self, forCellWithReuseIdentifier: "cell")
        moviesCollectionView.register(ContentCollectionViewHeader.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: "cellHeader")
        moviesCollectionView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(moviesCollectionView)
        NSLayoutConstraint.activate([
            moviesCollectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            moviesCollectionView.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor),
            moviesCollectionView.rightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.rightAnchor),
            moviesCollectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        moviesCollectionView.contentInset.bottom = view.safeAreaInsets.bottom
        // navigationItem.searchController = searchController
        navigationItem.title = "Movies & Serires"
        navigationItem.hidesSearchBarWhenScrolling = false
        navigationController?.navigationBar.prefersLargeTitles = true
        
        moviesCollectionView.collectionViewLayout = layout()
    }

    private func layout() -> UICollectionViewLayout {
           return UICollectionViewCompositionalLayout {[weak self] sectionNumber, environment -> NSCollectionLayoutSection? in
               guard let self = self else { return nil }
               return self.createBasicTypeSection()
           }
       }

    private func createBasicTypeSection() -> NSCollectionLayoutSection {
        // item
        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.3), heightDimension: .fractionalHeight(0.75))
        let item = NSCollectionLayoutItem(layoutSize: itemSize)
        item.contentInsets = .init(top: 10, leading: 5, bottom: 0, trailing: 5)
        
        // group
        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(0.9), heightDimension: .estimated(200))
        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitem: item, count: 3)
        
        // section
        let section = NSCollectionLayoutSection(group: group)
        section.orthogonalScrollingBehavior = .continuous
        section.contentInsets = .init(top: 0, leading: 5, bottom: 0, trailing: 5)
        
        let sectionHeader = self.createSectionHeader()
        section.boundarySupplementaryItems = [sectionHeader]
        
        return section
    }

    private func createSectionHeader() -> NSCollectionLayoutBoundarySupplementaryItem {
        let layoutSectionHeaderSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1), heightDimension: .absolute(30))
        
        // Section Header Layout
        let sectionHeader = NSCollectionLayoutBoundarySupplementaryItem(layoutSize: layoutSectionHeaderSize, elementKind: UICollectionView.elementKindSectionHeader, alignment: .top)
        
        return sectionHeader
    }

    private func showMoviews() {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            self.allItems
                .bind(to: self.moviesCollectionView.rx.items(dataSource: self.dataSource))
                .disposed(by: self.bag)
        }
    }
    
    // MARK: - Actions
    
}

extension HomeViewController: HomeDisplayLogic {
    func displayMoviesAndSeries(viewModel: Home.FetchMovieScene.ViewModel) {
        self.allItems.accept([AllMovies(name: "Section Maravilla", movies: viewModel.playingMovies ?? [ResultsMovies]())])
        self.allItems.add(element: AllMovies(name: "Top Ranked", movies: viewModel.playingMovies ?? [ResultsMovies]()))

    }
}



extension BehaviorRelay where Element: RangeReplaceableCollection {
    func add(element: Element.Element) {
        var array = self.value
        array.append(element)
        self.accept(array)
    }
}
