//
//  MovieDetailModels.swift
//  test-rappi-movies
//
//  Created by Sergio Zorrilla Arellano on 15/04/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the  iOS team Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//

import UIKit

enum MovieDetail {
    
    enum FetchDetailMovie {
        struct Request {
            var idMovie: Int?
        }
        struct Response {
            var reponseDetailMovie: ReponseDetailMovie?
        }
        struct ViewModel {
            var movieImage: String?
            var title: String?
            var datetime: String?
            var overview: String?
            var voteAverage: Double?
            var genres: [Genres]?
        }
    }
}

struct ReponseDetailMovie: Codable {
    var id: Int?
    var adult: Bool?
    var backdropPath: String?
    var belongsToCollection: BelongsToCollection?
    var budget: Int?
    var genres: [Genres]?
    var homepage: String?
    var imdbId: String?
    var originalLanguage: String?
    var originalTitle: String?
    var overview: String?
    var popularity: Double?
    var posterPath: String?
    var productionCompanies: [ProductionCompanies]?
    var productionCountries: [ProductionCountries]?
    var releaseDate: String?
    var revenue: Int?
    var runtime: Int?
    var spokenLanguages: [SpokenLanguages]?
    var status: String?
    var tagline: String?
    var title: String?
    var video: Bool?
    var voteAverage: Double?
    var voteCount: Int?

    private enum CodingKeys: String, CodingKey {
        case id
        case adult
        case backdropPath = "backdrop_path"
        case belongsToCollection = "belongs_to_collection"
        case budget
        case genres
        case homepage
        case imdbId = "imdb_id"
        case originalLanguage = "original_language"
        case originalTitle = "original_title"
        case overview
        case popularity
        case posterPath = "poster_path"
        case productionCompanies = "production_companies"
        case productionCountries = "production_countries"
        case releaseDate = "release_date"
        case revenue
        case runtime
        case spokenLanguages = "spoken_languages"
        case status
        case tagline
        case title
        case video
        case voteAverage = "vote_average"
        case voteCount = "vote_count"
    }
}

struct BelongsToCollection: Codable {
    var id: Int?
    var name: String?
    var posterPath: String?
    var backdropPath: String?

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case posterPath = "poster_path"
        case backdropPath = "backdrop_path"
    }
}

struct Genres: Codable {
    var id: Int?
    var name: String?
}

struct ProductionCompanies: Codable {
    var id: Int?
    var name: String?
    var logoPath: String?
    var originCountry: String?

    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case logoPath = "logo_path"
        case originCountry = "origin_country"
    }
}

struct ProductionCountries: Codable {
    var name: String?
    var iso31: String?

    private enum CodingKeys: String, CodingKey {
        case name
        case iso31 = "iso_3166_1"
    }
}

struct SpokenLanguages: Codable {
    var englishName: String?
    var iso639: String?
    var name: String?

    private enum CodingKeys: String, CodingKey {
        case englishName = "english_name"
        case iso639 = "iso_639_1"
        case name
    }
}

struct MovieVideo: Codable {
    var id: Int?
    var results: [ResultVideo]?
}

// MARK: - Result
struct ResultVideo: Codable {
    var iso6391, iso31661, name, key: String?
    var site: String?
    var size: Int?
    var type: String?
    var official: Bool?
    var publishedAt, id: String?

    enum CodingKeys: String, CodingKey {
        case iso6391 = "iso_639_1"
        case iso31661 = "iso_3166_1"
        case name, key, site, size, type, official
        case publishedAt = "published_at"
        case id
    }
}

